from Shelves import Shelf
from Warehouse_graph import Graph

class taxi_bot:
    Taxis = []
    
    def __init__(self, item_ID, Goal_Node, Warehouse_floor, Node = 0, X_pos = 0, Y_pos = 0, orientation = 0, Shelf_destination = None):
        self.item_ID = item_ID
        self.Goal_Node = Goal_Node
        self.Node = Node
        self.X_pos = X_pos
        self.Y_pos = Y_pos
        self.orientation = orientation
        self.Shelf_destination = Shelf_destination
        taxi_bot.Taxis.append(self)
        self.Taxi_ID = len(taxi_bot.Taxis)
        
        self.start(Warehouse_floor)
        
    def start(self, Warehouse_floor):
        self.spawn_taxi() # Spawn taxi
        Path = self.get_path(Warehouse_floor, +1) # get path to node
        self.go_to_goal(Path) # Go to shelf
        self.Arrived_at_Goal() # PUBLISH TO SUBSCRIBER
        self.store_item() # PUBLISH TO SUBSCRIBER
        
    def Return(self, Warehouse_floor): ##Should only run on Hive permisions
        self.Node, self.Goal_Node = self.Goal_Node, self.Node # Swap Start and Finish
        Path = self.get_path(Warehouse_floor, -1) # get return path
        self.go_to_goal(Path) # Return To start
        self.delete_Taxi() # Delete taxi
        
        
    def get_path(self, Warehouse_floor, weight):
        Path = Warehouse_floor.shortestPath(self.Node, self.Goal_Node)
        Warehouse_floor.Update_Graph_Weight(Path, weight)
        return Path
        
    def spawn_taxi(self):
        #ROS COMMAND TO SPAWN A TAXI
        #Should always spawn on Node (0)
        Cmd_vel = f"Spawn Taxi_bot at  Node(0)"
        print(Cmd_vel)
        
    def go_to_goal(self, Path):
        #generate cmd to output to terminal
        # temp cmd_vel 
        Cmd_vel = ""
        for i in range(len(Path)-1):
            cur = [self.X_pos, self.Y_pos]
            self.check_direction((Path[i] - Path[i+1]))
            Cmd_vel = f"Move from Node {cur} -> Node {[self.X_pos, self.Y_pos]} at orientation {self.orientation}"
            print(Cmd_vel)
            
    def check_direction(self, direction):
        if direction == -1:
            self.update_X_pos(-1)
            self.update_orientation(180) # Moving left           
        elif direction == 1:
            self.update_X_pos(+1)
            self.update_orientation(0) # Moving right            
        elif direction == -10: 
            self.update_Y_pos(+1)
            self.update_orientation(90) # Moving upward            
        elif direction == 10: 
            self.update_Y_pos(-1)
            self.update_orientation(270) # Moving downward 
        else:
            print("Error")
            
    def update_X_pos(self, New_X_pos):
        self.X_pos += New_X_pos
        
    def update_Y_pos(self, New_Y_pos):
        self.Y_pos += New_Y_pos
            
    def update_orientation(self, New_orientation):
        self.orientation = New_orientation
        
    def Arrived_at_Goal(self):
        #PUBLSISH TO CLAW
        pass
    
    def get_item(self, item):
        Shelf_ID, Shelf_pos = Shelf.search_shelves(item) # recieve topic command
        Path = Graph.Warehouse_floor.shortestPath(self, Graph.get_current_node((self.X_pos, self.Y_pos)), Shelf_ID)
        self.go_to_goal(Path)
        self.item = Shelf.shelves.get(Shelf_pos) # publish to hive
            
    def store_item(self):
        #ROS Publishes to claw That item is stored
        #Shelf.Shelf_position = Shelf_destination
        self.item = None
        
    def Check_Tasks(self):
        #CHECKS ROS TOPIC TO SEE IF MORE TASKS ARE TO BE COMPLETED
        pass
        
    def delete_Taxi(self):
        #ROS COMMAND TO /KIll A TAXI
        taxi_bot.Taxis.remove(self)
    
if __name__ == "__main__":
    width = 10
    height = 4

    V = width*height
    Warehouse_floor = Graph(V)
    Warehouse_floor.connect_matrix(width, height, 1, 3)
    
    Goal_Node = 15
    taxi_bot("Item_ID", Goal_Node, Warehouse_floor)
    taxi_bot("Item_ID", Goal_Node, Warehouse_floor)
    taxi_bot("Item_ID", Goal_Node, Warehouse_floor)
    taxi_bot("Item_ID", Goal_Node, Warehouse_floor)
    taxi_bot("Item_ID", Goal_Node, Warehouse_floor)
    taxi_bot("Item_ID", Goal_Node, Warehouse_floor)